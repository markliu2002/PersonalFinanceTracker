{"version":3,"sources":["components/Header.js","components/AddExpense.js","components/Legend.js","components/Sorting.js","components/ExpenseItem.js","components/Expenses.js","App.js","index.js"],"names":["Header","className","AddExpense","state","name","cost","category","date","moment","format","handleNameChange","e","setState","target","value","handleCostChange","handleCatChange","handleSubmit","preventDefault","alert","props","addExpense","onSubmit","this","action","method","type","title","placeholder","onChange","style","flex","Component","Legend","class","Sorting","onClick","reverseSort","ExpenseItem","handleDelete","delExpense","expense","id","_setIdName","Expenses","expenses","map","App","newExpense","filter","newExpenses","reverse","React","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.995983dc.chunk.js","sourcesContent":["// HEADER COMPONENT\r\nimport React from 'react'\r\n\r\nexport default function Header() {\r\n  \r\n  return (\r\n    <div>\r\n      <header className=\"header\">\r\n        Finance Tracker\r\n      </header>\r\n    </div>\r\n  )\r\n}\r\n\r\n","// ADDING EXPENSES COMPONENT (right under the Header that says \"Finance Tracker\")\r\nimport React, { Component } from 'react';\r\n\r\n// import moment to format the current time\r\nimport moment from 'moment';\r\n\r\nexport class AddExpense extends Component {\r\n\r\n  // The AddExpense component has its own state. Initially the name of the expense is nothing, cost is 0, category is Food & Drinks, and the date is the current time\r\n  state = {\r\n    name: '',\r\n    cost: 0,\r\n    category: 'Food & Drinks',\r\n    date: moment().format('MMMM Do YYYY, h:mm:ss a'),\r\n  }\r\n\r\n\r\n\r\n\r\n  // handleNameChange function to set the state of the AddExpense component. Changes the 'name' key to the value of the input element\r\n  handleNameChange = (e) => {\r\n    this.setState({\r\n      name: e.target.value\r\n    });\r\n  }\r\n\r\n  // handleCostChange function to set the state of the AddExpense component. Changes the 'cost' key to the value of the input element\r\n  handleCostChange = (e) => {\r\n    this.setState({\r\n      cost: e.target.value\r\n    });\r\n  }\r\n\r\n  // handleCatChange function to set the state of the AddExpense component. Changes the 'category' key to the value of the input element\r\n  handleCatChange = (e) => {\r\n    this.setState({\r\n      category: e.target.value\r\n    });\r\n  }\r\n\r\n  // handleSubmit function to call the addExpense function (which we got passed down as a prop) and pass in the new expense(which needs a name, cost, category, and date, or else a \"Missing Information\" alert will pop up)\r\n  handleSubmit = (e) => {\r\n    // it's gonna try to submit to the actual file, we stop that with e.preventDefault()\r\n    e.preventDefault();\r\n\r\n    // Only call the addExpense function (which we got passed down as a prop) if the name is not empty and cost is not zero\r\n    if (this.state.name!=='' && this.state.cost!==0) {\r\n\r\n      // Have to set state again before calling the addExpense function or else date will be the same one as from when it initially ran.\r\n      this.setState({\r\n        name: this.state.name,\r\n        cost: this.state.cost,\r\n        category: this.state.category,\r\n        date: moment().format('MMMM Do YYYY, h:mm:ss a'),\r\n      });\r\n      \r\n      // Alert so user can see that the expense name, cost, category, and date are correct\r\n      alert(`New Expense Added: ${this.state.name} $${this.state.cost} ${this.state.category} ${this.state.date}`)\r\n      \r\n      // Calls the addExpense function (which we got passed down as a prop) and passes in the new expense(name, cost, category, and date)\r\n      this.props.addExpense(this.state.name, this.state.cost, this.state.category, this.state.date);\r\n\r\n      // reset name, cost, category, and date after expense has been addded\r\n      this.setState({\r\n        name: '',\r\n        cost: 0,\r\n        category: 'Food & Drinks',\r\n        date: moment().format('MMMM Do YYYY, h:mm:ss a'),\r\n      }); \r\n\r\n    } \r\n    // else means the name was empty or the cost was still 0\r\n    else {\r\n      // Alert to tell the user that they are missing information\r\n      alert('Missing Information!');\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  // render() method that returns what to display\r\n  render() {\r\n    return (\r\n\r\n      // The whole form is inside the addExpenseDiv. When form is submitted, called the handleSubmit function(see above)\r\n      <div className=\"addExpenseDiv\">\r\n        <form onSubmit={this.handleSubmit} action=\"\" method=\"\">\r\n\r\n          <label>Name:</label> \r\n          <input // Input for expense name\r\n          type=\"text\"\r\n          title=\"name\"\r\n          placeholder=\"Add Expense Name...\"\r\n          value={this.state.name} // Sets value to this.state.name (initially is '')\r\n          onChange={this.handleNameChange} // React ships with a number of synthetic events that work across all browsers. \"onChange\" will capture any changes to our input box. need to add an onChange handler and update the state b/c when we start typing in the textbox, the title in the state is going to have whatever we type inside of it.\r\n          />\r\n\r\n          <label>Cost:</label>\r\n          <input // Input for expense cost\r\n          type=\"number\"\r\n          title=\"cost\"\r\n          // placeholder=\"Add Expense Cost...\"\r\n          value={this.state.cost} // Sets value to this.state.cost (initially is 0)\r\n          onChange={this.handleCostChange} // React ships with a number of synthetic events that work across all browsers. \"onChange\" will capture any changes to our input box. need to add an onChange handler and update the state b/c when we start typing in the textbox, the title in the state is going to have whatever we type inside of it.\r\n          />\r\n\r\n          <label>Category:</label> \r\n          <select // Drop down menu to show all the categories. \r\n          value={this.state.category} \r\n          onChange={this.handleCatChange} // Needs the \"onChange\" function just like Cost and Name in order to capture any changes\r\n          style={{flex:'1'}}\r\n          > \r\n            <option value=\"Food & Drinks\" >Food & Drinks</option>\r\n            <option value=\"Transportation\" >Transportation</option>\r\n            <option value=\"Utilities\" >Utilities</option>\r\n            <option value=\"Personal\" >Personal</option>\r\n          </select>\r\n          \r\n          <input // Input for the submit button\r\n          type=\"submit\" \r\n          value=\"Submit\"\r\n          className=\"btn\"\r\n          style={{flex:'1'}}\r\n          />\r\n\r\n        </form> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// \"export\" is ES6's feature which is used to Export a module(file) and use it in some other module(file).\r\nexport default AddExpense\r\n","// LEGEND COMPONENT WHICH SHOWS THE CATEGORIES AND THEIR COLOURS\r\nimport React from 'react'\r\n\r\nexport default function Legend() {\r\n\r\n  // Used an unordered list, each list item is a category\r\n  // Used span for the coloured dots\r\n  return (\r\n    <ul className=\"legend\">\r\n\r\n      <li className=\"FoodLegendIcon\">\r\n        <span class=\"Fooddot\"></span>\r\n        Food & Drinks\r\n      </li>\r\n\r\n      <li className=\"TransportLegendIcon\">\r\n        <span class=\"Transportdot\"></span>\r\n        Transportation\r\n      </li>\r\n\r\n      <li className=\"UtilLegendIcon\">\r\n        <span class=\"Utildot\"></span>\r\n        Utilities\r\n      </li>\r\n\r\n      <li className=\"PersonalLegendIcon\">\r\n        <span class=\"Personaldot\"></span>\r\n        Personal\r\n      </li>\r\n\r\n    </ul>\r\n  )\r\n}\r\n","// SORTING BUTTON COMPONENT\r\nimport React, { Component } from 'react'\r\n\r\nexport class Sorting extends Component {\r\n\r\n  // render() method that returns what to display\r\n  // onClick we call the reverseSort method which we got passed down as a prop\r\n  render() {\r\n    return (\r\n      <div className=\"sortingDiv\">\r\n          <button className=\"sortBtn\" onClick={this.props.reverseSort}>Toggle Sort</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// \"export\" is ES6's feature which is used to Export a module(file) and use it in some other module(file).\r\nexport default Sorting\r\n","// INDIVIDUAL EXPENSE ITEM COMPONENT (< the actual rectangles that have the expense, time, and cost)\r\nimport React, { Component } from 'react';\r\n\r\nexport class ExpenseItem extends Component {\r\n\r\n  // handleDelete function that will run when the deleteBtn is clicked. It will call the delExpense function(that got passed down as a prop) and pass the date.\r\n  // Need to pass the date b/c that is how we will know which expense to delete. The date is unique for each expense\r\n  handleDelete = (e) => { \r\n    this.props.delExpense(this.props.expense.date);\r\n  }\r\n\r\n\r\n\r\n  // function to set the id name depending on the category of the expense (< this.props.expense.category )\r\n  // this __setIdName() function is used to set the id of each expenseItem so we know what colour to give it (based on its category)\r\n  _setIdName() {\r\n    if (this.props.expense.category === 'Food & Drinks') \r\n      return \"FoodexpenseItem\";\r\n    else if (this.props.expense.category === 'Transportation')\r\n      return \"TransportexpenseItem\";\r\n    else if (this.props.expense.category === 'Utilities')\r\n      return \"UtilexpenseItem\";\r\n    else \r\n      return \"PersonalexpenseItem\";\r\n  }\r\n\r\n\r\n\r\n  // render() method that returns what to display\r\n  // Each expense item has a colour stripe(\"colourStripe\") to show its category, the main section (\"ExpenseMainSection\") which has the date, expense name, and cost, and lastly, has a delete button(\"deleteBtn\") \r\n  render() {\r\n    return (\r\n      // each expense item has the same general form so they call have className=\"expenseItem\". What changes is their background color, so depending on the props.category, their id will be different, and then is App.css, different id's wil have different background colors. \r\n      // To accomplish this, have to set the id to the _setIdName() function\r\n      <div className=\"expenseItem\"  >\r\n        <div>\r\n          <p className=\"colourStripe\" id={this._setIdName()}></p>\r\n        </div>\r\n        <div className=\"ExpenseMainSection\">\r\n          <p className=\"ExpenseItemText\">{this.props.expense.date} {'    '}  {this.props.expense.name} ${this.props.expense.cost}</p>\r\n        </div>   \r\n        <div className=\"ExpenseButtonSection\">\r\n          <button className=\"deleteBtn\" onClick={this.handleDelete}> X </button>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// \"export\" is ES6's feature which is used to Export a module(file) and use it in some other module(file).\r\nexport default ExpenseItem\r\n","// ARRAY OF ALL OF THE 'ExpenseItems' COMPONENT\r\nimport React, { Component } from 'react';\r\n\r\n// Need to import ExpenseItem \r\nimport ExpenseItem from './ExpenseItem';\r\n\r\nexport class Expenses extends Component {\r\n\r\n  // render() method that returns what to display\r\n  // The map() method creates a new array with the results of calling a function for every array element.\r\n  // Maps through the 'expenses' array (which we got passed down as a prop), and for each 'expense', we output the <ExpenseItem> component (< which we also need pass the current 'expense' and the 'delExpense' function down )\r\n  render() {\r\n    return this.props.expenses.map((expense) => (\r\n      <ExpenseItem expense={expense} delExpense={this.props.delExpense}/>\r\n    ));\r\n  }\r\n}\r\n\r\n// \"export\" is ES6's feature which is used to Export a module(file) and use it in some other module(file).\r\nexport default Expenses\r\n","// MAIN APP COMPONENT\nimport React from 'react';\n\n// Import components\nimport Header from './components/Header';\nimport AddExpense from './components/AddExpense';\nimport Legend from './components/Legend';\nimport Sorting from './components/Sorting';\nimport Expenses from './components/Expenses';\n\n// Import App.css\nimport './App.css';\n\n// Need React.Component to define a React component class\nclass App extends React.Component {\n  \n\n  // expenses initially is an empty array\n  state = {\n    expenses: [],\n  }\n\n\n\n  // addExpense function to add an expense \n  addExpense = (name, cost, category, date) => {\n\n    // Create a newExpense object with the parameters passed into addExpense\n    const newExpense = {\n      name: name,\n      cost: cost,\n      category: category,\n      date: date,\n    }\n\n    /* // Check to make sure the category is correct\n    if(newExpense.category === 'Food & Drinks') {\n      alert('FOOD & DRINKS EXPENSE')\n    }\n    else if(newExpense.category === 'Transportation') {\n      alert('TRANSPORTATION EXPENSE')\n    }\n    else if(newExpense.category === 'Utilities') {\n      alert('UTILITIES EXPENSE')\n    }\n    else {\n      alert('PERSONAL EXPENSE')\n    }\n    */\n    \n    // […]. The spread operator can be used to take an existing array and add another element to it while still preserving the original array\n    // when working with updating arrays, combining arrays, or converting node lists into arrays, it is an easy way to get the job done.\n    this.setState(\n      { expenses: [...this.state.expenses, newExpense] }\n    );\n    \n  }\n\n\n\n  // delExpense function to delete an expense\n  // Have to put this delExpense function is App.js not Expense.js b/c that is just the array component that holds all the ExpenseItems. This App.js is the actual UI. We need to pass this function FROM App.js   (b/c the UI will be changed for every delete)   TO Expense.js   (b/c the array will be changed for every delete)   THEN TO ExpenseItem.js   (where the actual delete button is)\n  delExpense = (date) => {\n\n    // set state b/c actual UI is going to change\n    this.setState(\n      // set expenses(key-value pair)l to expenses but we ony want the ones who's date key is NOT EQUAl to the date we got passed in \n      {expenses: this.state.expenses.filter(expense => expense.date!==date)}\n    );\n  }\n\n\n\n  // reverseSort function to reverse the order the expenses are ordered\n  reverseSort = () => {\n    // alert('SORT BUTTON HAS BEEN CLICKED');\n    // DESTRUCTURING: extracted the expenses array from this.state\n    const {expenses} = this.state\n\n    // newExpenses set to expenses but in reverse\n    let newExpenses = expenses.reverse() // Reverses order\n\n    // setState but set expenses to newExpenses (< reversed order)\n    this.setState(\n      {expenses: newExpenses}\n    );\n  }\n\n  \n\n  // render() method that returns what to display\n  // Everything is inside div with className App. This div is further split into 2 sections: topSection and bottom Section\n  \n  // topSection is the rectangle on top which has the Header and AddExpense component (< a form to enter a new expense). Need to pass the addExpense function as a prop to the AddExpense component\n\n  // bottomSection has the button the reverse the order of the expenses, the legend to indicate the category of the expenses, and the actual array of expenses\n  // Need to pass the reverseSort function to the Sorting component\n  // Need to pass expenses array and delExpense function to the Expenses component\n  render() {\n    return (\n\n      <div className=\"App\">\n\n        <div className=\"topSection\">\n          <Header />\n          <AddExpense addExpense={this.addExpense} />\n        </div>\n        \n        <div className=\"bottomSection\">\n          <Sorting reverseSort={this.reverseSort}/> \n          <Legend />\n          <Expenses expenses={this.state.expenses} delExpense={this.delExpense}/>\n        </div>\n      \n      </div>\n    );\n  }\n}\n\n// \"export\" is ES6's feature which is used to Export a module(file) and use it in some other module(file).\nexport default App; \n","import React from 'react'; // Import the library\nimport ReactDOM from 'react-dom'; // Import the react-dom\nimport App from './App'; // Import the main App component\n\n\n// ReactDOM renders the <App/> component into the div with the id=\"root\". <App/> is just the App.js\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}